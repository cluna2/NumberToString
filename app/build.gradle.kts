/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    
    // Lombok
    id("io.freefair.lombok") version "8.13.1"
    jacoco
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)

    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // Mockito Core (Java)
    testImplementation("org.mockito:mockito-core:5.6.0")
    // Mockito JUnit 5 extension
    testImplementation("org.mockito:mockito-junit-jupiter:5.6.0")
    // ICU4J for unit tests
    testImplementation("com.ibm.icu:icu4j:73.2")

    // Log4j interface 
    implementation("org.apache.logging.log4j:log4j-api:2.17.1")
    // Log4j-core (actual logging implementation)
    implementation("org.apache.logging.log4j:log4j-core:2.17.1")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
    // Allow mockito to load java agents dynamically and suppress warnings
    jvmArgs("-XX:+EnableDynamicAgentLoading")
    jvmArgs("-Xshare:off") 

    sourceSets {
        val test by getting{
            java.srcDirs("src/test/unit")
            java.srcDirs("src/test/integration")
        }
    }
}

tasks.withType<JavaCompile> {
    options.compilerArgs.addAll(listOf("-Xlint:unchecked"))
}

tasks {
    javadoc {
        options {
            // (this as CoreJavadocOptions).addBooleanOption("Xdoclint:none", true)
            (this as CoreJavadocOptions).addStringOption("doctitle", "NumberToString API")
        }
    }
}
tasks.javadoc {
    dependsOn(tasks.named("build"))
    dependsOn(tasks.named("delombok"))

    source = fileTree("$buildDir/generated/sources/delombok").matching {
        include("**/*.java")
    }

    // println("Javadoc source files: ${source.files}") 

    // Exclude Lombok generated Builder code from Javadocs.
    exclude("java/main/numbertostring/logger/*.java")
    exclude("java/main/numbertostring/App.java")

}

tasks.jacocoTestReport {
    // Exclude specific files from coverage
    classDirectories.setFrom(
        files(
            classDirectories.files.map {
                fileTree(it) {
                    exclude(
                        "**/logger/**",
                        "**/exception/**",
                        "App.java/**"
                    )
                }
            }
        )
    )
}